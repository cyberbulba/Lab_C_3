#define _CRT_SECURE_NO_WARNINGS
#include<stdio.h>
#include<stdlib.h>

//структура связного списка
struct list
{
	int inf;
	struct list* next;
};

//функция проверки на ввод пользователем числа (для количества рядов и строк)
int fool_check()
{
	int num, x;
	char buf;
	while (1)
	{
		x = scanf("%d", &num);
		if (x)
		{
			return num;
		}
		else
		{
			scanf("%c", &buf);
			printf("Input 'int', please.\n");
		}
	}
}

//ввод списка
struct list* input_list(struct list* start)
{
	struct list* cur, * end;
	cur = end = NULL;
	int ind;
	char buf;

	while (1)
	{
		cur = (struct list*)malloc(sizeof(struct list));
		if (cur == NULL)
		{
			printf("ERROR: no memory.");
			return NULL;
		}
		cur->next = NULL;
		ind = scanf("%d", &cur->inf);
		if (ind == 0)
		{
			printf("ERROR: List is NULL or elements not 'int'.");
			return NULL;
		}
		if (start == NULL)
		{
			start = cur;
			end = cur;
		}
		else
		{
			end->next = cur;
			end = cur;
		}
		scanf("%c", &buf);

		if (buf == '.')
			break;
		
		if (buf != ' ')
		{
			printf("ERROR: Wrong inputting symbol.");
			return NULL;
		}
	}
	return start;
}

//очистка памяти
void clear_memory(struct list** start)
{
	struct list* cur = *start;
	while (cur != NULL)
	{
		*start = cur->next;
		free(cur);
		cur = *start;
	}
	*start = NULL;
	return;
}

//удаление элементов
void remove_elements_from_a_to_b_to_new_struct(struct list** start, struct list** start_new, int a, int b)
{
	struct list* cur, * last;
	struct list *end_new;
	cur = last = *start;
	end_new = *start_new;
	while (cur != NULL)
	{
		if (cur->inf >= a && cur->inf <= b)
		{
			if (cur == *start)         //если элемент который надо переместить стоит на первом месте
			{
				if (*start_new == NULL)      //если до этого в новом списке не было элементов 
				{
					*start_new = *start;     //указатель на начало нвого списка
					end_new = *start;		 //указатель на конец нового списка
					*start = (*start)->next; //передвигаем начало старого списка
					last = cur;				 //указатель на предыдущий ставим на текущий
					cur = cur->next;		 //передвигаем текущий
					end_new->next = NULL;    //зануляем последний элемент нового списка
				}
				else                        //если до этого в списке были элементы
				{
					end_new->next = *start;  //делаем элемент концом нового списка
					end_new = end_new->next; //указатель на конец нового списка
					*start = (*start)->next; //передвигаем начало старого списка
					last = cur;              //указатель на предыдущий ставим на текущий
					cur = cur->next;         //передвигаем текущий
					end_new->next = NULL;    //зануляем последний элемент нового списка

				}
			}
			else							//если элемент который надо переместить стоит в середине или в конце
			{
				if (*start_new == NULL)		//если в новом списке ещё нет
				{
					*start_new = cur;		//текущий делаем первым во втором списке
					end_new = cur;			//текущий делаем последним во втором списке
					last->next = cur->next; //переставляем указатель через элемент который надо поместить в новый список
					cur = cur->next;		//двигаем текущий
					end_new->next = NULL;	//зануляем последний элемент нового списка
				}
				else                        //если элементы были
				{
					end_new->next = cur;	//делаем текущий концом нового списка
					end_new = end_new->next;//текущий делаем последним во втором списке
					last->next = cur->next; //переставляем указатель через элемент который надо поместить в новый список
					cur = cur->next;		//двигаем текущий
					end_new->next = NULL;	//зануляем последний элемент нового списка
				}
			}
		}
		else
		{
			last = cur;						//двигаем предыдущий
			cur = cur->next;				//двигаем текущий
		}						   
	}
	return;
}

//функция для вывода списка
void print_list(struct list** start)
{
	struct list* cur = *start;
	for (cur = *start;cur != NULL;cur = cur->next)
	{
		printf("%d ", cur->inf);
	}
	return;
}

int main()
{
	int a, b;
	struct list* start, *start_new;
	start = start_new = NULL;
	
	//ввод начального списка
	printf("Input start list before '.':\n");
	start = input_list(start);

	if (start == NULL)
	{
		return 0;
	}

	//ввод границ с проверкой
	printf("Input A:\n");
	a = fool_check();
	
	printf("Input B:\n");
	b = fool_check();

	if (a > b)
	{
		printf("ERROR: a must be lower that b or equalent b.");
		return 0;
	}

	//перестановка необходимых элементов в новый список
	remove_elements_from_a_to_b_to_new_struct(&start, &start_new, a, b);

	//если новый список пуст, то вывод старого
	if (start_new == NULL)
	{
		printf("New list is NULL.");
		printf("\nOld list without numbers from %d to %d:\n", a, b);
		print_list(&start);
		return 0;
	}

	//проверка пустой ли старый список
	if (start == NULL)
	{
		printf("Old list is NULL.");
	}
	else
	{
		printf("Old list without numbers from %d to %d:\n", a, b);
		print_list(&start); //вывод старого если не пустой
	}
	
	//очистка памяти старого списка
	clear_memory(&start);
	
	//вывод нового списка
	printf("\nNew list with numbers from %d to %d:\n", a, b);
	print_list(&start_new);
	
	//очистка памяти нового списка
	clear_memory(&start_new);

	return 0;
}
